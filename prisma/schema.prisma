generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// Use  model for business owners and customers
model User {
  id         String   @id @default(cuid())
  email      String   @unique
  name       String?
  phone      String?
  avatar     String?
  role       UserRole @default(USER)
  isVerified Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  businesses Business[]
  reviews    Review[]
  favorites  Favorite[]
  blogPosts  BlogPost[]

  @@map("users")
}

// Business model - main entity
model Business {
  id          String  @id @default(cuid())
  name        String
  slug        String  @unique
  description String? @db.Text
  email       String?
  phone       String?
  website     String?
  address     String
  city        String
  state       String
  zipCode     String
  country     String  @default("US")
  latitude    Float?
  longitude   Float?

  // Business details
  status     BusinessStatus @default(PENDING)
  isVerified Boolean        @default(false)
  isFeatured Boolean        @default(false)
  isPremium  Boolean        @default(false)

  // Business hours (JSON format)
  businessHours Json?

  // SEO fields
  metaTitle       String?
  metaDescription String? @db.Text

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Foreign keys
  ownerId    String
  categoryId String

  // Relations
  owner         User                  @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  category      Category              @relation(fields: [categoryId], references: [id])
  subcategories BusinessSubcategory[]
  images        BusinessImage[]
  reviews       Review[]
  favorites     Favorite[]
  analytics     BusinessAnalytics[]

  // Indexes
  @@index([categoryId])
  @@index([ownerId])
  @@index([city, state])
  @@index([status])
  @@index([isFeatured])
  @@index([isPremium])
  @@map("businesses")
}

// Categories for businesses
model Category {
  id          String   @id @default(cuid())
  name        String   @unique
  slug        String   @unique
  description String?
  icon        String?
  color       String?  @default("#667eea")
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  businesses    Business[]
  subcategories Subcategory[]

  @@index([isActive, sortOrder])
  @@map("categories")
}

// Subcategories for more specific classification
model Subcategory {
  id          String   @id @default(cuid())
  name        String
  slug        String
  description String?
  isActive    Boolean  @default(true)
  sortOrder   Int      @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Foreign keys
  categoryId String

  // Relations
  category   Category              @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  businesses BusinessSubcategory[]

  @@unique([categoryId, slug])
  @@index([categoryId])
  @@map("subcategories")
}

// Junction table for businesses and subcategories (many-to-many)
model BusinessSubcategory {
  id            String   @id @default(cuid())
  businessId    String
  subcategoryId String
  createdAt     DateTime @default(now())

  // Relations
  business    Business    @relation(fields: [businessId], references: [id], onDelete: Cascade)
  subcategory Subcategory @relation(fields: [subcategoryId], references: [id], onDelete: Cascade)

  @@unique([businessId, subcategoryId])
  @@map("business_subcategories")
}

// Business images
model BusinessImage {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  isPrimary Boolean  @default(false)
  sortOrder Int      @default(0)
  createdAt DateTime @default(now())

  // Foreign keys
  businessId String

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@index([businessId])
  @@map("business_images")
}

// Reviews and ratings
model Review {
  id         String   @id @default(cuid())
  rating     Int // 1-5 stars
  title      String?
  content    String?  @db.Text
  isVerified Boolean  @default(false)
  isVisible  Boolean  @default(true)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Foreign keys
  businessId String
  userId     String

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  // One review per user per business
  @@unique([businessId, userId])
  @@index([businessId, rating])
  @@index([userId])
  @@map("reviews")
}

// User favorites
model Favorite {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Foreign keys
  userId     String
  businessId String

  // Relations
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([userId, businessId])
  @@map("favorites")
}

// Business analytics for tracking views, clicks, etc.
model BusinessAnalytics {
  id               String   @id @default(cuid())
  views            Int      @default(0)
  clicks           Int      @default(0)
  phoneClicks      Int      @default(0)
  websiteClicks    Int      @default(0)
  directionsClicks Int      @default(0)
  date             DateTime @db.Date
  createdAt        DateTime @default(now())

  // Foreign keys
  businessId String

  // Relations
  business Business @relation(fields: [businessId], references: [id], onDelete: Cascade)

  @@unique([businessId, date])
  @@index([businessId])
  @@map("business_analytics")
}

// Contact inquiries from website
model Inquiry {
  id        String        @id @default(cuid())
  name      String
  email     String
  phone     String?
  subject   String?
  message   String        @db.Text
  status    InquiryStatus @default(NEW)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  // Foreign keys (optional - for business-specific inquiries)
  businessId String?

  @@index([businessId])
  @@index([status])
  @@index([createdAt])
  @@map("inquiries")
}

// Site settings and configuration
model Setting {
  id          String      @id @default(cuid())
  key         String      @unique
  value       String?     @db.Text
  type        SettingType @default(STRING)
  description String?
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("settings")
}

// Blog posts for SEO and content marketing
model BlogPost {
  id            String     @id @default(cuid())
  title         String
  slug          String     @unique
  content       String     @db.LongText
  excerpt       String?    @db.Text
  featuredImage String?
  status        PostStatus @default(DRAFT)
  publishedAt   DateTime?
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt

  // SEO fields
  metaTitle       String?
  metaDescription String? @db.Text

  // Foreign keys
  authorId String

  // Relations
  author User @relation(fields: [authorId], references: [id])

  @@index([status, publishedAt])
  @@index([authorId])
  @@map("blog_posts")
}

// Enums
enum UserRole {
  USER
  BUSINESS_OWNER
  ADMIN
  SUPER_ADMIN
}

enum BusinessStatus {
  PENDING
  APPROVED
  REJECTED
  SUSPENDED
  INACTIVE
}

enum InquiryStatus {
  NEW
  IN_PROGRESS
  RESOLVED
  CLOSED
}

enum SettingType {
  STRING
  NUMBER
  BOOLEAN
  JSON
}

enum PostStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}
